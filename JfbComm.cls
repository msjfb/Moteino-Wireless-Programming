VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "JfbComm"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit
Const TIMEOUT_VALUE As Byte = 5
Private msLf As String
Private mLf As Byte
'local variable(s) to hold property value(s)
Private mvarTargetSet               As Boolean
Private mvarGotHandshake            As Boolean
Private mvarImageAccepted           As Boolean
Private mvarGotReply                As Boolean
Private mvarReceivedSeq             As Long
Private mvarSuccess                 As Boolean

Private WithEvents mcomm As MSComm
Attribute mcomm.VB_VarHelpID = -1
Private WithEvents mWinsock As Winsock
Attribute mWinsock.VB_VarHelpID = -1

'events generated by this mcomm class
Public Event Received(Chars As String)
Public Event Sent(Chars As String)


Public Property Get TargetSet() As Boolean
    TargetSet = mvarTargetSet
End Property

Public Property Get GotHandshake() As Boolean
    GotHandshake = mvarGotHandshake
End Property

Public Property Get ImageAccepted() As Boolean
    ImageAccepted = mvarImageAccepted
End Property

Public Property Get Success() As Boolean
    Success = mvarSuccess
End Property

Public Property Get GotReply() As Boolean
    GotReply = mvarGotReply
End Property

Public Property Let GotReply(ByVal bGotReply As Boolean)
    mvarGotReply = bGotReply
End Property

Public Property Get ReceivedSeq() As Long
    ReceivedSeq = mvarReceivedSeq
End Property

Private Sub Class_Initialize()
    mLf = &HA
    msLf = Chr$(10)
    Set mcomm = frmComm.MSComm1
    Set mWinsock = frmComm.Winsock1
End Sub

Private Sub Class_Terminate()
If mcomm.PortOpen Then
    mcomm.PortOpen = False
End If
Set mcomm = Nothing

Set mWinsock = Nothing

End Sub

Public Sub Output(Buffer As String, Result As Integer)
    On Error GoTo Erreur

    If gTcpIpMode Then
        mWinsock.SendData Buffer
    Else
        mcomm.Output = Buffer
    End If
    Result = 0
    Exit Sub
Erreur:
    Result = -1

    Select Case Err.Number
        Case 40006
            MyMsgBox "Problem sending to IP address.  Please verify and try again"
        Case Else
            MyMsgBox "Problem sending to serial port. Please verify and try again"
    End Select
End Sub

Public Sub InputMode(InputMode As Long)
    If gTcpIpMode Then
        gTcpIpInputMode = InputMode
    Else
        mcomm.InputMode = InputMode
    End If
End Sub

Public Sub InputLen(InputLen As Long)
    If gTcpIpMode Then
        gTcpIpInputLen = InputLen
    Else
        mcomm.InputLen = InputLen
    End If
End Sub

Public Function InBufferCount() As Long
    If gTcpIpMode Then
        Select Case gTcpIpInputMode
        Case comInputModeBinary
            InBufferCount = Len(gTcpIpDatInBinBuffer)
        Case comInputModeText
            InBufferCount = Len(gTcpIpDatInTxtBuffer)
        End Select
    Else
        InBufferCount = mcomm.InBufferCount
    End If
End Function

Public Function Inputt() As Variant
    Dim MyInput As Variant
    Dim i As Integer, j As Integer
    If gTcpIpMode Then
        Select Case gTcpIpInputMode
        Case comInputModeBinary
        If gTcpIpInputLen = 0 Then 'flush buffer
            If gTcpIpDatInBinBuffer <> "" Then
                ReDim MyInput(Len(gTcpIpDatInBinBuffer) - 1) As Byte
                For i = 1 To gTcpIpInputLen
                    MyInput(i - 1) = Asc(Mid$(gTcpIpDatInBinBuffer, i, 1))
                Next i
                Inputt = MyInput
            End If
            gTcpIpDatInBinBuffer = ""
        Else
            If gTcpIpDatInBinBuffer <> "" Then
                ReDim MyInput(gTcpIpInputLen - 1) As Byte
                For i = 1 To gTcpIpInputLen
                    MyInput(i - 1) = Asc(Mid$(gTcpIpDatInBinBuffer, i, 1))
                Next i
                Inputt = MyInput
                gTcpIpDatInBinBuffer = Mid$(gTcpIpDatInBinBuffer, gTcpIpInputLen + 1)
            End If
        End If
        Case comInputModeText
            If gTcpIpInputLen = 0 Then 'flush buffer
                MyInput = gTcpIpDatInTxtBuffer
                gTcpIpDatInTxtBuffer = ""
            Else
                MyInput = Left$(gTcpIpDatInTxtBuffer, gTcpIpInputLen)
                gTcpIpDatInTxtBuffer = Mid$(gTcpIpDatInTxtBuffer, gTcpIpInputLen + 1)
            End If
            Inputt = MyInput
        End Select
    Else
        Inputt = mcomm.Input
    End If
       
End Function

Public Function IsPortOpen() As Boolean
    If gTcpIpMode Then
        If mWinsock.State = sckConnected Then
            IsPortOpen = True
        Else
            IsPortOpen = False
        End If
    Else
        IsPortOpen = mcomm.PortOpen
    End If
End Function

Public Sub OpenPort()
    On Error Resume Next
    Dim StartTime As Single
    If gTcpIpMode Then
        If mWinsock.State = sckClosed Then
            gTcpIpError = 0
            mWinsock.Connect
            StartTime = Timer
            Do While (Timer < StartTime + 5)    'Wait for a maximum of 5 seconds
                If (mWinsock.State = 7) Then
                     Exit Do
                End If
                DoEvents
            Loop
            Sleep 1000
            If mWinsock.State <> 7 Then
                mWinsock.Close
            End If
        End If
    Else
        If IsPortOpen = False Then
            mcomm.PortOpen = True
        End If
    End If
    On Error GoTo 0
End Sub

Public Sub ClosePort()
    On Error Resume Next
    If gTcpIpMode Then
        If mWinsock.State = sckConnected Then
            gTcpIpError = 0
            mWinsock.Close
        End If
    Else
        If IsPortOpen = True Then
            mcomm.PortOpen = False
        End If
    End If
    On Error GoTo 0
End Sub

Public Function MySettings(Settings As String) As Boolean
    On Error GoTo Erreur
    Dim arr() As String
    arr = Split(Settings, ",")
    If gTcpIpMode Then
        mWinsock.RemoteHost = arr(0)
        mWinsock.RemotePort = Val(arr(1))
    Else
        mcomm.Settings = arr(0)  'baud rate
        mcomm.Commport = Val(arr(1)) 'com port
    End If
    MySettings = True
    Exit Function
            
Erreur:
    Select Case Err.Number
        Case 40020
            MyMsgBox "IP address not found. Please verify and try again"
        Case Else
            MyMsgBox "Error while connecting to serial port. Please verify and try again"
    End Select
End Function

Public Sub Commport(Commport As Byte)
    If gTcpIpMode Then
    Else
        mcomm.Commport = Commport
    End If
End Sub

Public Sub RThreshold(RThreshold As Integer)
    If gTcpIpMode Then
    Else
        mcomm.RThreshold = RThreshold
    End If
End Sub

Public Function DsrHolding() As Boolean
    If gTcpIpMode Then
        DsrHolding = True
    Else
        DsrHolding = mcomm.DsrHolding
    End If
End Function

Public Function CDHolding() As Boolean
    If gTcpIpMode Then
        CDHolding = True
    Else
        CDHolding = frmComm.MSComm1.CDHolding
    End If
End Function

Private Sub mcomm_OnComm()
Dim Message As String
    Dim PauseTime As Single
    Dim StartTime As Single
    Dim Dummy As Variant
    Dim bReceived As Variant
    Dim ELfRecv As Boolean
    Dim i As Integer

    PauseTime = 2  '2 seconds
    mcomm.RThreshold = 0  'turn off receive events
    
Select Case mcomm.CommEvent
   ' Handle each event or error by placing
   ' code below each case statement

   ' Errors
      Case comEventBreak        ' A Break was received.
      Case comEventFrame        ' Framing Error
      Case comEventOverrun      ' Data Lost.
      Case comEventRxOver       ' Receive buffer overflow.
      Case comEventRxParity     ' Parity Error.
      Case comEventTxFull       ' Transmit buffer full.
      Case comEventDCB          ' Unexpected error retrieving DCB]

   ' Events
      Case comEvCD              ' Change in the CD line.
      Case comEvCTS             ' Change in the CTS line.
      Case comEvDSR             ' Change in the DSR line.
      Case comEvRing            ' Change in the Ring Indicator.
      Case comEvReceive         ' Received RThreshold # of
          GetIncoming
                          
      Case comEvSend   ' There are SThreshold number of characters in the transmit buffer.
        'not used for now. using the .Output method directly
      Case comEvEOF   ' An EOF charater was found in the input stream
   End Select
   
mcomm.RThreshold = 1  'turn on receive events (threshold=1)
End Sub

Private Sub GetIncoming()

    Dim Message As String
    Dim PauseTime As Single
    Dim StartTime As Single
    Dim Dummy As Variant
    Dim bReceived As Variant
    Dim ELfRecv As Boolean
    Dim i As Integer

    Do
        ELfRecv = False 'Lf is EndOfRecord
        StartTime = Timer
        Do While Timer < StartTime + 2    'Wait for LF character a maximum of 2 seconds
            InputLen 1
            If InBufferCount <> 0 Then
                bReceived = Inputt
                If bReceived(0) = mLf Then
                    ELfRecv = True
                    Exit Do
                End If
                Message = Message & Chr$(bReceived(0))
            End If
        Loop
        If ELfRecv Then
            RaiseEvent Received("[IN]" & Message)
            ParseInput Message
            Message = ""
        End If
    Loop While InBufferCount <> 0

End Sub


Private Sub ParseInput(Message As String)
Dim ipos1 As Integer
Dim lSeq As Long
'Here we analyze the received message and set the approriate class properties: TargetSet, GotHandshake, ImageAccepted, SentLine, ReceiveSeq, Success
'These properties are read by the main program


Do
    If InStr(Message, "SUCCESS") <> 0 Then
        mvarSuccess = True
        Exit Do
    Else
        mvarSuccess = False
    End If
    
    'Reply to Set Target
    If Left(Message, 3) = "TO:" Then  'target
        ipos1 = InStr(4, Message, ":")  'skip over the target number
        If Mid$(Message, ipos1 + 1, 2) = "OK" Then  'look for the keyword
            mvarTargetSet = True
        Else
            mvarTargetSet = False
        End If
        Exit Do
    End If
    
    'Reply to Handshake request
    If Left(Message, 4) = "FLX?" Then
        If Mid$(Message, 5, 2) = "OK" Then
            mvarGotHandshake = True
            mvarImageAccepted = True
        ElseIf Mid$(Message, 5, 3) = "NOK" Then
            mvarGotHandshake = True
            mvarImageAccepted = False
        Else
            mvarGotHandshake = False
            mvarImageAccepted = False
        End If
        Exit Do
    End If
    
    'Reply to Sent record
    If Left(Message, 4) = "FLX:" Then
        If InStr(Message, "OK") <> 0 Then
            ipos1 = InStr(5, Message, ":") 'locate the colon after the Seq number, starting at position 5
            lSeq = Val(Mid$(Message, 5, (ipos1 - 5))) 'extract the seq number between the 2 colons
            mvarReceivedSeq = lSeq
            mvarGotReply = True
        Else
            mvarGotReply = False
        End If
        Exit Do
    End If
    
    Exit Do 'dummy loop

Loop

End Sub

Private Sub mWinsock_Connect()
'MsgBox "TCPIP Connected"
End Sub

Private Sub mWinsock_DataArrival(ByVal bytesTotal As Long)
    Dim Mydata As Variant
    Dim MyTempData As Variant
    Dim currentNb As Integer
    Dim i As Integer, j As Integer
        
    Select Case gTcpIpInputMode
    Case comInputModeBinary
        mWinsock.GetData Mydata, vbString, bytesTotal
        If IsEmpty(gTcpIpDatInBinBuffer) Or gTcpIpDatInBinBuffer = "" Then 'no data left in buffer
            gTcpIpDatInBinBuffer = Mydata
        Else
            gTcpIpDatInBinBuffer = gTcpIpDatInBinBuffer & Mydata
        End If
    Case comInputModeText
        mWinsock.GetData Mydata, vbString, bytesTotal
        gTcpIpDatInTxtBuffer = gTcpIpDatInTxtBuffer & Mydata
    End Select
    
    GetIncoming

End Sub

Private Sub mWinsock_Error(ByVal Number As Integer, Description As String, ByVal Scode As Long, ByVal Source As String, ByVal HelpFile As String, ByVal HelpContext As Long, CancelDisplay As Boolean)
    'MsgBox "TCPIP Error: " & Description
    gTcpIpError = Number
End Sub
