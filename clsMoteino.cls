VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "clsMoteino"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_Ext_KEY = "SavedWithClassBuilder6" ,"Yes"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit


Private msLf As String
Private mLf As Byte

Private WithEvents mJfbcomm As JfbComm
Attribute mJfbcomm.VB_VarHelpID = -1
'events generated by this mmoteino class
Public Event Received(Chars As String)
Public Event Sent(Chars As String)

Private Sub Class_Initialize()
     mLf = &HA
    msLf = Chr$(10)
    Set mJfbcomm = New JfbComm
 End Sub
 
 Private Sub Class_Terminate()
    Set mJfbcomm = Nothing
End Sub

Public Function Startup(ByVal MySettings As String) As Boolean
    On Error GoTo err_Handler
    If mJfbcomm.MySettings(MySettings) = False Then
        Startup = False
    Else
        mJfbcomm.OpenPort
        If gTcpIpMode Then
            If gTcpIpError <> 0 Then
                Startup = False
            Else
                Startup = True
            End If
        Else
            If Err <> 0 Then
                Startup = False
            Else
                Startup = True
            End If
        End If
        Sleep 1000
    End If
    Exit Function

err_Handler:
    Startup = False
End Function

Public Function Shutdown() As Boolean
    On Error GoTo err_Handler
    If mJfbcomm.IsPortOpen Then
        mJfbcomm.ClosePort
        Shutdown = True
    End If
    
    Exit Function
    
'================
err_Handler:
    Shutdown = False
End Function

Public Property Get CommOpened() As Boolean
    CommOpened = mJfbcomm.IsPortOpen
End Property

Public Property Get TargetSet() As Boolean
    TargetSet = mJfbcomm.TargetSet
End Property

Public Property Get GotHandshake() As Boolean
    GotHandshake = mJfbcomm.GotHandshake
End Property

Public Property Get ImageAccepted() As Boolean
    ImageAccepted = mJfbcomm.ImageAccepted
End Property

Public Property Get Success() As Boolean
    Success = mJfbcomm.Success
End Property

Public Property Get GotReply() As Boolean
    GotReply = mJfbcomm.GotReply
End Property

Public Property Get ReceivedSeq() As Long
    ReceivedSeq = mJfbcomm.ReceivedSeq
End Property

Public Sub ConnectToMote(Target As Integer)
    Dim StartTime As Single
    Dim Dum As Variant
    Dim sCommand As String
    Dim Result As Integer
    ' open up the FTDI serial port to get data transmitted to Moteino

    Sleep (2000) 'wait for Moteino reset after port open and potential bootloader time (~1.6s)
    Dum = mJfbcomm.Inputt  'clear buffer
    'send target ID first
    sCommand = "TO:" & Format(Target) & Chr$(10)
    RaiseEvent Sent("[OU]" & sCommand)
    mJfbcomm.Output sCommand, Result
    If Result = 0 Then
        StartTime = Timer
        Do While Timer < StartTime + 3  'wait until the OnCOmm event received and processed the expeced reply
            If mJfbcomm.TargetSet = True Then
                Exit Do
            End If
            DoEvents
        Loop
    End If
End Sub

Public Sub WaitForHandshake(EndOfFile As Boolean)
    Dim StartTime As Single
    Dim sCommand As String
    Dim Dum As Variant
    Dim iRetry As Integer, Result As Integer
    
    For iRetry = 1 To 3  ' 3 retries
        Dum = mJfbcomm.Inputt  'clear buffer
        If EndOfFile = True Then
            sCommand = "FLX?EOF" & Chr$(10)
        Else
            sCommand = "FLX?" & Chr$(10)
        End If
        RaiseEvent Sent("[OU]" & sCommand)
        mJfbcomm.Output sCommand, Result
        If Result = 0 Then
            StartTime = Timer
            Do While Timer < StartTime + 5  'wait until the OnCOmm event received and processed the expeced reply
                If mJfbcomm.GotHandshake = True Then
                    Exit Do
                End If
                DoEvents
            Loop
            If mJfbcomm.GotHandshake = True Then
                Exit For
            End If
        Else
            Exit For
        End If
     Next iRetry

End Sub

Public Sub SendLine(Seq As Long, Ligne As String)
    Dim StartTime As Single
    Dim sCommand As String
    Dim Dum As Variant
    Dim iRetry As Integer, Result As Integer
    
    For iRetry = 1 To 3  ' 3 retries
        Dum = mJfbcomm.Inputt  'clear buffer
        mJfbcomm.GotReply = False
        sCommand = "FLX:" & Format(Seq) & Ligne & Chr$(10)
        RaiseEvent Sent("[OU]" & sCommand)
        mJfbcomm.Output sCommand, Result
        If Result = 0 Then
            StartTime = Timer
            Do While Timer < StartTime + 4  'wait for reply 4 seconds max
                If mJfbcomm.GotReply = True Then
                    Exit Do
                End If
                DoEvents
            Loop
            If mJfbcomm.GotReply = True Then
                Exit For
            End If
        Else
            Exit For
        End If
     Next iRetry

End Sub


Private Sub mJfbcomm_Received(Chars As String)
    'Event lifted by the class for incoming characteers
    'No processing done here, only passed along
    'See  <Sub mMoteino_Received>
    RaiseEvent Received(Chars)
End Sub

Private Sub mJfbcomm_Sent(Chars As String)
    'Event lifted by the class for outgoing characteers
    'No processing done here, only passed along
    'See  <Sub mMoteino_Sent>
    RaiseEvent Sent(Chars)
End Sub
